AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    IT-Academy

    
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

#GLOBAL SECTION


Globals:
    Function:
        Timeout: 3
        Runtime: nodejs8.10
        Handler: app.lambdaHandler
        Environment:
            Variables:
                ENDPOINT: dynamodb.us-east-1.amazonaws.com
                REGION: us-east-1



Resources:

#LAMBDA SECTION

    SaveStudent:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: save_students/
            Policies: AmazonDynamoDBFullAccess
            Events:
                SaveStudent:
                    Type: Api
                    Properties:
                        Path: /student
                        Method: post
            
    OptionStudent:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: option_student/
            Events:
                OptionStudent:
                    Type: Api
                    Properties:
                        Path: /student
                        Method: options

    view_student_admin:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: view_student_admin/
            Policies: AmazonDynamoDBReadOnlyAccess
            Events:
                view_student:
                    Type: Api
                    Properties:
                        Path: /student
                        Method: get                    

    Login:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: login/
            Policies: AmazonDynamoDBReadOnlyAccess
            Events:
                login:
                    Type: Api
                    Properties:
                        Path: /login
                        Method: post      

    Authenticator:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: authenticator/
            Policies: AmazonDynamoDBReadOnlyAccess
                                        
                                

# TABLE SECTION

    StudentTable:
        Type: AWS::Serverless::SimpleTable   
        Properties: 
            TableName: Student
            PrimaryKey:
                Name: regNo
                Type: String
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5

    SecretTable:
        Type: AWS::Serverless::SimpleTable   
        Properties: 
            TableName: Secret
            PrimaryKey:
                Name: key
                Type: String
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1 
    
    usersTable:
        Type: AWS::Serverless::SimpleTable   
        Properties: 
            TableName: users
            PrimaryKey:
                Name: user
                Type: String
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1        

 #S3 BUCKET PORTION 
    photoBucket:
        Type: AWS::S3::Bucket 
        Properties:
            BucketName: it-academy-photos-bucket 
            CorsConfiguration: 
                CorsRules:
                    - AllowedHeaders: ['*']
                      AllowedMethods: [GET,POST,PUT]
                      AllowedOrigins: ['*']
                      Id: myrules   


    cognitoRole:
        Type: AWS::IAM::Role
        Properties:
             AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                         Federated:
                           - "cognito-identity.amazonaws.com"
                             
                        Action:
                           - sts:AssumeRoleWithWebIdentity 
                        Condition:
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: unauthenticated   
                       

             Policies:
                -
                    PolicyName: "photo_client_policy"
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                           
                            - 
                             Sid: VisualEditor1
                             Effect: Allow
                             Action:
                               - s3:PutObject
                               - s3:GetObjectAcl
                               - s3:GetObject
                               - s3:GetObjectTorrent
                               - s3:GetObjectVersionAcl
                               - s3:PutObjectVersionTagging
                               - s3:GetObjectTagging
                               - s3:PutObjectTagging
                               - s3:PutBucketCORS
                               - s3:PutObjectAcl
                               - s3:GetObjectVersion
                             Resource: "*"
                               
                               
    cognitoIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            IdentityPoolName: "photo_bucket"
            AllowUnauthenticatedIdentities: true

    cognitoIdentityPoolRoleAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref cognitoIdentityPool
            Roles:
                unauthenticated: !GetAtt cognitoRole.Arn
      

Outputs:

    HelloWorldApi:
      Description: "API Gateway endpoint URL for Prod stage for Hello World function"
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/student/"

    cognitoIdentity:
      Description: "cognito identity pool name"
      Value: !Ref cognitoIdentityPool

    S3Bucket:
      Description: "s3 bucket name"
      Value: !Ref photoBucket     


